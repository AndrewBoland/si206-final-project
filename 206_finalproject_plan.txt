SI 206 W17
Put your name here:
Andrew Boland

----

Which option for the final project are you choosing -- 1, 2, or 3?
Option 2 - API Mashup: Twitter & OMDB

IF YOU ARE CHOOSING OPTION 3, answer the following questions:

* Write 1-3 sentences summarizing what the goal of your project is:


* What are your two data sources? Provide links to documentation or websites you will be getting data from.


* Why are you proposing this project?


* What will the output of this project be? What will it look like, and what information will it contain?


* What are your concerns about this proposal?


-----

THE FOLLOWING QUESTIONS ARE FOR EVERYONE. (Though they may be easier if you are choosing Option 1 or 2, because you can reference the Option 1 or 2 instructions.)

* What will at least one of the classes you're going to define be called?
I will be making a class called Movie.


* What will that class take as input to its constructor?
The Movie class will take a dictionary containing movie data.


* What will 1 instance of this class represent?
An instance of this class will represent the data of a single movie with instance variables and methods.


* What are 3 instance variables this class will have? What will they be called, and what information will they hold? Why are they important?
Three instance variables will be title, director and actors, they will be called title, director, and actors. The title variable will hold the string title of the movie, the director variable will hold the string director of the movie and the actors variable will hold a list of strings of actors in the movie. These are all key aspects of a movie and will be important for the mashup with twitter, as they can all be searched for in twitter. They are also important for relevant database data.


* Explain 2 methods the class will have that are not the class constructor (__init__ method) by answering the following questions for each. 
ONE METHOD:
- What will the name of the method be?
__str__


- What will the method do?
This method will print the title of the movie and its director in one nice looking line.


- Will it take any additional input? 
No


- Will it return anything? Should it change anything about the instance/an instance variable? 
It will return a string corresponding to the title and the director and will not change any instance variables.


- Why is it useful for this class definition, in this program?
This method is useful for showing the user the title and director of a movie in a readable way.


ANOTHER METHOD:
- What will the name of the method be?
getActors


- What will the method do?
The method will return the given number of actors in a string list.


- Will it take any additional input? 
This will take one integer input corresponding to the number of actors to be returned, if there are less actors than the number given, it will return all actors.


- Will it return anything? Should it change anything about the instance/an instance variable? 
It will return a string list of actors and will not modify any instance variables.


- Why is it useful for this class definition, in this program?
This is useful for grabbing the top billed actor from the movie but it can also return the top x billed actors.


[If you definitely want to have a third, feel free to answer those questions a third time, because you'll have to do so eventually. when you write documentation!]


* What will the tables in your database be?
Tweets, Users, and Movies


* What fields will each database table have? Which field of them is the primary key? You should list the fields for each database table here, e.g.
Tweets:
- text ... 
(etc.)

Tweets:
- text, tweet_id(primary key), user_id, movie_id, num_favorites, num_retweets

Users:
- user_id(primary key), screen_name, num_favorites_made

Movies:
- movie_id(primary key), title, director, num_languages, imdb_rating, top_billed_actor



* List, in English, 2 queries you'll want to make from your database. At least one should be a JOIN. You can always change these later, but start with  ideas you're interested in and lessen the work on yourself later on! 
(e.g. from class examples, maybe "I want to make a query that accesses the numbers of times each user has favorited tweets, and the number of times tweets that user posted have been favorited -- so I'll be joining the Tweets table and the Users table")
Query 1:
I want to make a query that will find the tweet with the most retweets and will return the screen name of the user who tweeted it, the tweet text and number of retweets,-- so I'll be joining the Tweets and Users table.

Query 2:
I want to make a query that will get the movie with the highest IMDB rating


* What are at least 2 of the data processing mechanics you're planning to use? 
I will use list comprehension and dictionary comprehension.



* Why will each of those be useful to you? What data might you use it on? 
(e.g. "Set comprehension: I think I'm going to be looking for unique names and proper nouns in this big set of text, so I'm going to use a set comprehension"). 
>>>This is especially important if you are doing Option 3, but it's important for everyone!<<<
List Comprehension: I think I am going to use list comprehension for querying the database and making a list of users. This will be a useful structure for anything involing more than one actor, possibly from different movies.
Dictionary Comprehension: I think I will use this for creating a dictionary with user_id as the key and all of the users tweets as the value. This will be useful for fast lookup of a users tweets once queried from the database.




* What will your output look like? Will it be a .txt file? a CSV file? something else? What information will it contain? >>>This is especially important if you are doing Option 3, but it's important for everyone!<<<
The output will be a text file with different queried information about the movie searched for with the highest rating, the user with the most rewteeted tweet, and possibly more information. This will a formatted and easily readable file.

